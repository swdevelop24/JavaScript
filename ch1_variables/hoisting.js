// 참고
// https://www.youtube.com/watch?v=fETYLCU2YYc

//var의 문제점 보완하기 위해 let나옴
//var와 비교한 let
// ##  1) 변수이름 중복 안됨
// ##  2) 지역변수로 취급됨 (function만 지역변수로 보는 var와달리 for, if에도 지역변수로)
// ##  3) 선언 전에 값 접근 안됨 (TDZ)
//     3*) TDZ : Temporal Death Zone



// * chatgpt 내용요약 

| 선언 키워드  | 호이스팅 |   선언 시점           | 초기화 시점        | 초기화 전 참조 가능 여부 | 값 초기화 전 참조시 결과 |
|-------------|----------|----------------------|-------------------|--------------------------|-------------------------|
| `var`       | 가능     | 실행 컨텍스트의 최상단 | 변수 선언 위치     | 가능 (`undefined`)       | `undefined`             |
| `let`       | 가능     | 실행 컨텍스트의 최상단 | 변수 선언 이후     | 불가능 (TDZ)             | `ReferenceError`         |
| `const`     | 가능     | 실행 컨텍스트의 최상단 | 변수 선언 이후     | 불가능 (TDZ)             | `ReferenceError`         |

// TDZ가 발생하는 이유:
// 호이스팅(hoisting)은 자바스크립트에서 변수 선언을 코드의 최상단으로 끌어올리는 동작입니다. 
// 하지만 var와 달리 let과 const는 초기화되기 전에는 참조할 수 없습니다.
// let과 const로 선언된 변수는 선언은 호이스팅되지만 초기화는 나중에 실행됩니다. 
// 그 시점까지 그 변수를 참조하려 하면 TDZ에 갇혀 ReferenceError가 발생하게 됩니다.

//요약:
// let과 const는 호이스팅되지만 초기화되기 전까지 TDZ에 갇혀 있어서 참조할 수 없습니다.
// 초기화가 이루어지기 전에는 해당 변수를 사용하면 **ReferenceError**가 발생합니다.
// var는 TDZ가 없어서, 선언 전에 참조하면 undefined 값을 반환합니다

//TDZ -CHATGPT 부분 요약
// TDZ에서 **"D"**는 **"Dead"**를 의미합니다. 즉, **"Temporal Dead Zone"**에서 
// "Dead"는 해당 구간에서 변수가 죽어있는 상태 또는 참조할 수 없는 상태임을 나타냅니다.
// 따라서 **TDZ (Temporal Dead Zone)**는 변수가 선언되었으나 
// 초기화되지 않은 시점에서 참조할 수 없는 구간을 말합니다.
